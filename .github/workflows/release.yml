name: Release TVGate

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux-amd64
          - linux-arm64
          - linux-armv7
          - linux-386
          - linux-ppc64
          - linux-ppc64le
          - linux-s390x
          - windows-amd64
          - windows-386
          - darwin-amd64
          - darwin-arm64
          - android-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: stable

      - name: Set environment variables
        run: |
          VERSION=$(cat config/version 2>/dev/null || echo "latest")
          case "${{ matrix.platform }}" in
            linux-amd64)  GOOS=linux; GOARCH=amd64 ;;
            linux-arm64)  GOOS=linux; GOARCH=arm64 ;;
            linux-armv7)  GOOS=linux; GOARCH=arm; GOARM=7 ;;
            linux-386)    GOOS=linux; GOARCH=386 ;;
            linux-ppc64)  GOOS=linux; GOARCH=ppc64 ;;
            linux-ppc64le) GOOS=linux; GOARCH=ppc64le ;;
            linux-s390x)  GOOS=linux; GOARCH=s390x ;;
            windows-amd64) GOOS=windows; GOARCH=amd64 ;;
            windows-386)   GOOS=windows; GOARCH=386 ;;
            darwin-amd64)  GOOS=darwin; GOARCH=amd64 ;;
            darwin-arm64)  GOOS=darwin; GOARCH=arm64 ;;
            android-arm64) GOOS=android; GOARCH=arm64 ;;
          esac
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "GOOS=$GOOS" >> $GITHUB_ENV
          echo "GOARCH=$GOARCH" >> $GITHUB_ENV
          [ -n "$GOARM" ] && echo "GOARM=$GOARM" >> $GITHUB_ENV
          echo "CGO_ENABLED=0" >> $GITHUB_ENV

      - name: Build TVGate
        run: |
          mkdir -p build
          OUTPUT="build/TVGate-${GOOS}-${GOARCH}"
          [ "$GOOS" = "windows" ] && OUTPUT="$OUTPUT.exe"
          go build -ldflags="-s -w -X 'github.com/qist/tvgate/config.Version=$VERSION'" -o $OUTPUT .
          ls -lh build/

      - name: Prepare packaging
        run: |
          mkdir -p package
          cp README.md package/
          cp doc/config.yaml package/
          if [ "$GOOS" = "windows" ]; then
            cp build/TVGate-windows-${GOARCH}.exe package/
          else
            cp build/TVGate-${GOOS}-${GOARCH} package/
            cp doc/TVGate.service package/
          fi
          ls -lh package/

      - name: Package
        run: |
          mkdir -p build
          cd package
          if [ "$GOOS" = "windows" ]; then
            zip -r "../build/TVGate-${GOOS}-${GOARCH}.zip" *
          else
            tar -czvf "../build/TVGate-${GOOS}-${GOARCH}.tar.gz" *
          fi
          cd ..
          ls -lh build/

      # - name: Upload Release Assets
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ github.ref_name }}
      #     file: ${{ github.workspace }}/build/TVGate-${GOOS}-${GOARCH}*
      #     asset_name: TVGate-${GOOS}-${GOARCH}${{ GOOS == 'windows' && '.zip' || '.tar.gz' }}
      #     prerelease: true
      #     overwrite: true
